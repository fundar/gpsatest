<?php
/**
* 
*/

namespace ARV\Modules\Report\Model;

# Models Framework
use WPPFW\MVC\Model\PluginModel;

/**
* 
*/
class ViewerModel extends PluginModel {

	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $awstatsFileExtension = 'html';

	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $awstatsFilePrefix = 'awstats';
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $awstatsScript;
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $buildStaticScript;
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $configFile;
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $defaultReportFileHash;

	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $domain;
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $iconsDirectory;
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $installerNoListIndexFile;
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $reportsDirectory;
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $reportFileHash;
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $reportFilesHash;
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $reportForm;
	
	/**
	* put your comment there...
	* 
	* @var mixed
	*/
	protected $reportId;
	
	/**
	* put your comment there...
	* 
	*/
	protected function & applyFilesHash() {
		# Initialize
		$files = $this->getReportFiles();
		$reportDirectory = $this->getReportPath();
		$awstatsFillPrefix = $this->getAWStatsFilePrefix();
		$awstatsFileExtension = $this->getAWStatsFileExtension();
		$domain = $this->getDomain();
		# For every exists hash find he correposnding file
		# rename to use the hash
		foreach ($files as $hash => $displayName) {
			# Get awstats original file namd and the new file name
			$oldFile = $reportDirectory . DIRECTORY_SEPARATOR . "{$awstatsFillPrefix}.{$domain}.{$displayName}.{$awstatsFileExtension}";
			$newFile = $reportDirectory . DIRECTORY_SEPARATOR . "{$hash}.{$awstatsFileExtension}";
			# Rename file
			rename($oldFile, $newFile);
		}
		# Chain
		return $this;
	}

	/**
	* put your comment there...
	* 
	* @param mixed $directoryName
	*/
	public function buildReportsDirectoryAbsolutePath($reportsDirRelPath) {
		# Report directory path is locatted under wordpress wp-content directory
		$reportsDirAbsolutePath = ABSPATH . $reportsDirRelPath;
		# Return
		return $reportsDirAbsolutePath;
	}

	/**
	* put your comment there...
	* 
	*/
	protected function buildStaticReport() {
		# Inityialize
		$successed = false;
		$iconsDirectory = $this->getIconsDirectory() .  DIRECTORY_SEPARATOR . '*';
		$configFile = $this->getConfigFile();
		$configDir = dirname($configFile);
		$backupConfigFile = "{$configFile}-arv-backup";
		$reportDirectory = $this->getReportPath();
		$imagesDirectory = $reportDirectory . DIRECTORY_SEPARATOR . 'images' . DIRECTORY_SEPARATOR;
		# Check if permitted to call exec() funtion
		if (!function_exists('exec') || (exec('echo EXEC') != 'EXEC')) {
			# Could not exec()
			$this->addError('Building AWStats reports required using of exec() function. Could not call exec() function under current system configuration.');
		}
		else {
			# Backup original Configuration file
			if (is_readable($configDir) && is_writable($configDir)) {
				# Try to copy backup file
				if (file_exists($backupConfigFile) || copy($configFile, $backupConfigFile)) {
					# Get images to work by seeting images location to images instead of /images/awstats
					# Load images relative (note / removed)
					file_put_contents($configFile, "\n# ARV Configuration\n\nDirIcons=\"images\"", FILE_APPEND);
					# Execute build static script
					# Currently there is no check regards the result of buildstatic script
					$awstatsIntf = new AWStats($this->getAWStatsScript());
					$awstatsIntf->buildStatic(
						$this->getBuildStaticScript(),
						$configDir,
						$this->getDomain(),
						$reportDirectory
					);
					# Restore original copnfiguration file.
					unlink($configFile);
					if (!rename($backupConfigFile, $configFile)) {
						$this->addError('Unable to restore awstats config file. This file would be re-generated by your host provider everyday!');
					}
					# Rename awstats statictics home file to has 'index' instead of nothing.
					# this is a standard way for hashing report files functions to work on
					$domain = $this->getDomain();
					$awstatsFilePrefix = $this->getAWStatsFilePrefix();
					$awstatsFileExtension = $this->getAWStatsFileExtension();
					rename(
						$reportDirectory . DIRECTORY_SEPARATOR . "{$awstatsFilePrefix}.{$domain}.{$awstatsFileExtension}",
						$reportDirectory . DIRECTORY_SEPARATOR . "{$awstatsFilePrefix}.{$domain}.index.{$awstatsFileExtension}"
					);
					# Copy images
					if (file_exists($imagesDirectory) || mkdir($imagesDirectory, 0755)) {
						# Copy icons to generated report images directory
						exec("cp -r {$iconsDirectory} {$imagesDirectory}");
						# All passed!
						$successed = true;
					}
					else {
						# Could not create images directory
						$this->addError("Unable to create reports images folder : {$imagesDirectory}");
					}
				}
				else {
					# Copy error
					$this->addError("Could not create config file backup :{$backupConfigFile}");
				}
			}
			else {
				# No Permissions
				$this->addError("Unable to create config file backup. Config file directory is not writable: {$configDir}");
			}
		}
    return $successed;
	}

	/**
	* put your comment there...
	* 
	*/
	public function createReport() {
		# Initialize
		$created = false;
		$plugin =& $this->factory()->get('ARV\Plugin');
		$reportsDirectory = $this->getReportsDirectoryAbsolutePath();
		$currentReportDirectory = $this->getReportPath();
		# Check if has access permissions to reports directory
		if (is_readable($reportsDirectory) && is_writable($reportsDirectory)) {
			# Create Report Folder if not already exists
			if (file_exists($currentReportDirectory) || mkdir($currentReportDirectory, 0755)) {
				# Create Index file
				$srcIndexFile = $plugin->getDirectory() . DIRECTORY_SEPARATOR . $this->getInstallerNoListIndexFile();
				$desIndexFile = $currentReportDirectory . DIRECTORY_SEPARATOR . 'index.php';
				if (file_exists($desIndexFile) || copy($srcIndexFile, $desIndexFile)) {
					# Build static report
					if ($this->buildStaticReport()) {
						# Create awstats file structures hash,
						# no more check regards creating hash
						# all should be fine!
						$this->hashReportFiles();
						# return true / success feedback
						$created = true;					
					}
				}
				else {
					# Cannot create index file
					$this->addError("Unable to create index file inside reports directory. Its very important to prevent listing report files from Public!");
				}
			}
			else {
				# Report error
				$this->addError("Unable to create report directory : {$currentReportDirectory}");
			}
		}
		else {
			# Report error
			$this->addError("No enough permission for creating report directory : {$currentReportDirectory}");
		}
		# Returns
		return $created;
	}

	/**
	* put your comment there...
	* 
	*/
	public function deleteReport() {
		# Initialize
		$deleted = false;
		$reportDirectory = $this->getReportPath();
		# Delete report files
		if ($this->deleteReportFiles()) {
			# Clear report states (file hashes, id)
			$this->reportId = null;
			$this->reportFileHash = null;
			$this->reportFilesHash = null;
			# Delete index file
			$indexFile = $reportDirectory . DIRECTORY_SEPARATOR . 'index.php';
		 	if (!file_exists($indexFile) || unlink($indexFile)) {
		 		# Delete image folder, make it hard to delete something else
		 		# if there is anything wrong in the report directory path
		 		$imagesFolders = array('browser', 'clock', 'cpu', 'flags', 'mime', 'os', 'other');
		 		$imagesDirectoryPath = $reportDirectory . DIRECTORY_SEPARATOR . 'images';
		 		# Initialize wordpress file system
		 		WP_Filesystem();
		 		$wpFileSystem = new \WP_Filesystem_Direct(null);
		 		# Delete all images folders.
		 		foreach ($imagesFolders as $imageFolder) {
		 			# Get image folder path
		 			$imageFolderPath = $imagesDirectoryPath . DIRECTORY_SEPARATOR . $imageFolder;
		 			# Delete recusively
					if (!$imagesFolderDeleted = $wpFileSystem->delete($imageFolderPath, true)) {
						# Report problem
						$this->addError("Couldn't delete image folder : {$imageFolderPath}");
						# Get out
						break;
					}
		 		}
		 		# Finally delete image directory
		 		if ($imagesFolderDeleted) {
					if (!file_exists($imagesDirectoryPath) || rmdir($imagesDirectoryPath)) {
						# Delete report directory
						if (!file_exists($reportDirectory) || rmdir($reportDirectory)) {
							# Feedback state
							$deleted = true;
						}
						else {
							$this->addError("Could not delete report directory : {$reportDirectory}");
						}
					}
					else {
						$this->addError("Couldn't delete report images directory: {$imagesDirectoryPath}");
					}
		 		}
		 	}
		 	else {
				$this->addError("Could not delete report index.php file : {$indexFile}");
		 	}
		}
		# Feedback state
		return $deleted;
	}

	/**
	* put your comment there...
	* 
	*/
	protected function deleteReportFiles() {
		# initialize
		$deleted = true;
		$files = array_keys($this->getReportFiles());
		$reportDirectory = $this->getReportPath();
		# Check permissions
		if (!is_readable($reportDirectory) || !is_writable($reportDirectory)) {
			# Report problem
			$this->addError("No enough permissions : {$reportDirectory}");
			# Report as not delete
			$deleted = false;
		}
		else {
			# Get file path for every file and delete it.
			foreach ($files as $fileHash) {
				# Get file path
				$file = $reportDirectory . DIRECTORY_SEPARATOR . "{$fileHash}.{$this->awstatsFileExtension}";
				# Delete file, do nothing if the file does not exists.
				# Its very hand to use delete report many times if it fails to delete some files
				# This allow many tries.
				if (file_exists($file) && !unlink($file)) {
					# Report a problem
					$this->addError("Unable to delete report file : {$file}");
					# Feedback error
					$deleted = false;
				}
			}
		}
		# State if succesfully deleted
		return $deleted;
	}

	/**
	* put your comment there...
	* 
	* @param mixed $name
	*/
	protected function findFileHash($name) {
		# Exchange array keys and values
		$filesHash = array_flip($this->getReportFiles());
		# Search for file and return the assoicated hash
		return $filesHash[$name];
	}
	
	/**
	* put your comment there...
	* 
	* @param mixed $hash
	*/
	protected function findFileName($hash) {
		# Initiaize
		$displayNames = $this->getReportFiles();
		# Search for file hash and return display name
		return $displayNames[$hash];
	}

	/**
	* put your comment there...
	* 
	*/
	public function generateRID() {
		# Generate new Report Id
		# Set as current report id
		return $this->setReportId(uniqid(md5('arv' . NONCE_KEY . NONCE_SALT), true));
	}

	/**
	* put your comment there...
	* 
	*/
	public function getActiveReportFileHash() {
		# Return report file is previously saved or 
		# use default file
		return  $this->getReportFileHash() ? 
						$this->getReportFileHash() :
						$this->defaultReportFileHash;
	}

	/**
	* put your comment there...
	* 
	*/
	public function getActiveReportFileName() {
		# Get Active report file hash
		$activeFileHash = $this->getActiveReportFileHash();
		# Get name from hash
		return $this->findFileName($activeFileHash);
	}

	/**
	* put your comment there...
	* 
	*/
	public function getAWStatsFileExtension() {
		return $this->awstatsFileExtension;
	}

	/**
	* put your comment there...
	* 
	*/
	public function getAWStatsFilePrefix() {
		return $this->awstatsFilePrefix;
	}
	
	/**
	* put your comment there...
	* 
	*/
	public function getAWStatsScript() {
		return $this->awstatsScript;
	}
	
	/**
	* put your comment there...
	* 
	*/
	public function getBuildStaticScript() {
		return $this->buildStaticScript;
	}
	
	/**
	* put your comment there...
	* 
	*/
	public function getConfigFile() {
		return $this->configFile;
	}
	
	/**
	* put your comment there...
	* 
	*/
	public function getDomain() {
		return $this->domain;
	}

	/**
	* put your comment there...
	* 
	*/
	public function getIconsDirectory() {
		return $this->iconsDirectory;
	}
	
	/**
	* put your comment there...
	* 
	*/
	public function getInstallerNoListIndexFile() {
		return $this->installerNoListIndexFile;
	}

	/**
	* put your comment there...
	* 
	*/
	public function getReportFileHash() {
		return $this->reportFileHash;
	}

	/**
	* put your comment there...
	* 
	*/
	public function getReportPath() {
		# Get absolute path to current report directory
		return $this->getReportsDirectoryAbsolutePath() . DIRECTORY_SEPARATOR . $this->getReportId();
	}

	/**
	* put your comment there...
	* 
	*/
	public function getReportsDirectory() {
		return $this->reportsDirectory;
	}
	
	/**
	* put your comment there...
	* 
	*/
	public function getReportsDirectoryAbsolutePath() {
		return $this->buildReportsDirectoryAbsolutePath($this->getReportsDirectory());
	}
	
	/**
	* put your comment there...
	* 
	*/
	public function getReportFiles() {
		return $this->reportFilesHash;
	}
	
	/**
	* put your comment there...
	* 
	*/
	public function getReportFileDocumentURL() {
		# Initialize
		$pathToReportsDirectory = str_replace(DIRECTORY_SEPARATOR , '/', $this->getReportsDirectory());
		$reportDirectory = $this->getReportId();
		$currentFileHash = $this->getActiveReportFileHash();
		# Get URL to document file.
		$documentUrl = home_url("{$pathToReportsDirectory}/{$reportDirectory}/{$currentFileHash}.{$this->awstatsFileExtension}");
		# Returns
		return $documentUrl;
	}
	
	/**
	* put your comment there...
	* 
	*/
	public function getReportFilesURL() {
		# Initialize
		$urls = array();
		$router =& $this->router();
		$baseUrl = $router->routeAction();
		# Get urls for all files hashes
		foreach ($this->getReportFiles() as $hash => $displayName) {
			# Ad to Urls list
			$urls["{$baseUrl}&file={$hash}"] = $displayName;
		}
		# Return URL of the report file
		return $urls;
	}
	
	/**
	* put your comment there...
	* 
	*/
	public function & getReportForm() {
		return $this->reportForm;
	}

	/**
	* put your comment there...
	* 
	*/
	public function getReportId() {
		return $this->reportId;
	}

	/**
	* put your comment there...
	* 
	*/
	public function hashReportFiles() {
		# Initialize
		$reportDirectory = $this->getReportPath();
		$awstatsFilePrefix = $this->getAWStatsFilePrefix();
		$awstatsFileExtension = $this->getAWStatsFileExtension();
		# Clear previous hash
		$this->reportFilesHash = array();
		# Process all files create hash for every awstats report file
		# use the hash as file name and cache file name to be used 
		# for user interface awstats report list
		foreach(new \DirectoryIterator($reportDirectory) as $reportFile) {
			# Process only awstats report files, those are start by awstats prefix
			if ($reportFile->isFile()) {
				if (strpos($reportFile->getBasename(), $awstatsFilePrefix) === 0) {
					# generate file hash
					$fileHash = uniqid(md5('arv' . NONCE_KEY . SECURE_AUTH_KEY), true);
					# Get file name exactly after the extension from right
					$fileParts = array_reverse(explode('.', $reportFile->getBasename()));
					$fileName = $fileParts[1];
					# Rename file name to the generated hash
					rename($reportFile->getPathname(), ($reportDirectory . DIRECTORY_SEPARATOR . "{$fileHash}.{$awstatsFileExtension}"));
					# Add to hash list
					$this->reportFilesHash[$fileHash] = $fileName;
				}
			}
		}
		# Set default file hash
		$this->defaultReportFileHash = $this->findFileHash('index');
		# Chaining
		return $this;
	}

	/**
	* put your comment there...
	* 
	*/
	public function hasReport() {
		return $this->reportId ? true : false;
	}

	/**
	* put your comment there...
	* 
	*/
	protected function initialize() {
		# Create report form
		$this->reportForm = new Forms\ReportForm();
	}

	/**
	* put your comment there...
	* 
	* @param mixed $domain
	* @param mixed $awstatsScript
	* @param mixed $buildStaticScript
	* @param mixed $configFile
	* @param mixed $iconsDirectory
	* @return ViewerModel
	*/
	public function & setAWStatsParameters($domain, $awstatsScript, $buildStaticScript, $configFile, $iconsDirectory) {
		# Initialize
		$this->domain =& $domain;
		$this->awstatsScript =& $awstatsScript;
		$this->buildStaticScript =& $buildStaticScript;
		$this->configFile =& $configFile;
		$this->iconsDirectory =& $iconsDirectory;
		# Chain
		return $this;
	}

	/**
	* put your comment there...
	* 
	* @param mixed $reportsDirectory
	* @param mixed $noListIndexFile
	* @return ViewerModel
	*/
	public function & setInstallationParameters($reportsDirectory, $noListIndexFile) {
		# Set installtion params
		$this->reportsDirectory =& $reportsDirectory;
		$this->installerNoListIndexFile = $noListIndexFile;
		# Chaining
		return $this;
	}

	/**
	* put your comment there...
	* 
	* @param mixed $file
	*/
	public function & setReportFile($fileHash) {
		# Set currently requested report file
		$this->reportFileHash = $fileHash;
		# Chain
		return $this;
	}

	/**
	* put your comment there...
	* 
	* @param mixed $rId
	*/
	public function setReportId($rId) {
		# Set
		$this->reportId = $rId;
		# Chain
		return $this;
	}

	/**
	* put your comment there...
	* 
	*/
	public function updateReport() {
		# Delete current report files
		if ($this->deleteReportFiles()) {
			# Build new report
			if ($this->buildStaticReport()) {
				# Apply report files hash to newsly created files
				$this->applyFilesHash();
			}
		}
		# Chain
		return $this;
	}

}
